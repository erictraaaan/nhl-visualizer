{"version":3,"sources":["util/APIUtils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EVENT_IDS","getGameAPIData","gamePK","a","Promise","resolve","reject","apiCall","axios","get","then","json","console","log","scoringPlays","data","liveData","plays","periodPlays","playsByPeriod","lastIndex","endIndex","spStartIndex","startIndex","spEndIndex","allPlays","forEach","play","includes","result","eventTypeId","about","eventIdx","coords","eventIDx","x","parseInt","coordinates","y","eventTypeID","teamID","team","id","players","player","playerData","fullName","playerType","push","iPlay","homeStatsRaw","boxscore","teams","home","teamStats","teamSkaterStats","homeID","gameData","homeGoals","goals","homeBlocks","blocked","homeShots","shots","homeRinkSide","linescore","periods","rinkSide","homeGoalieIDs","goalies","homeGoalies","key","goalieRaw","goalie","person","saves","stats","goalieStats","homeStats","startingRinkSide","blocks","awayStatsRaw","away","awayID","awayGoals","awayBlocks","awayShots","awayRinkSide","awayGoalieIDs","awayGoalies","details","awayStats","catch","App","getData","res","useEffect","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef8d8b82.chunk.js","sourcesContent":["import { IAPIGameDetails, IAPIGameScore, IAPIScoreResults, IGoalie, IPeriodPlay, IPlay, IPlayer, ITeamStats } from \"./types/APITypes\";\nimport axios from \"axios\";\n\nconst EVENT_IDS = ['GOAL','SHOT','MISSED_SHOT','BLOCKED_SHOT']\n\nexport const getScoresAPIData = async (date: string): Promise<IAPIScoreResults> => {\n\n    return new Promise( (resolve, reject) => {\n        const apiCall = `https://statsapi.web.nhl.com/api/v1/schedule?startDate=${date}&endDate=${date}`;\n\n        axios.get(apiCall)\n        .then( (json) => {\n            console.log(\"raw: \", json);\n            if (json.data.dates && json.data.dates.length == 1){\n                console.log(\"in here\")\n                var games: IAPIGameScore[] = [];\n                json.data.dates[0].games.forEach( (game : any) => {\n                    const gamePk: number = game.gamePk;\n                    const homeTeamID = game.teams.home.team.id;\n                    const awayTeamID = game.teams.away.team.id;\n                    const awayTeamScore = game.teams.away.score;\n                    const homeTeamScore = game.teams.home.score;\n                    const gameData: IAPIGameScore = {\n                        gamePk: gamePk,\n                        homeTeamID: homeTeamID,\n                        homeTeamScore: homeTeamScore,\n                        awayTeamID: awayTeamID,\n                        awayTeamScore: awayTeamScore\n                    }\n                    games.push(gameData);\n                });\n                const output: IAPIScoreResults = {\n                    date: date,\n                    games: games\n                }\n                console.log(\"output: \", output);\n                return resolve(output);\n            }\n            else {\n                return reject(null);\n            }\n        })\n        .catch( () => {\n            return reject(null);\n        })\n    })   \n}\n\nexport const getGameAPIData = async (gamePK: number) => {\n    return new Promise( (resolve, reject) => {\n        const apiCall = `https://statsapi.web.nhl.com/api/v1/game/${gamePK}/feed/live`;\n        axios.get(apiCall)\n        .then( (json) => {\n            console.log(\"raw: \", json);\n            const scoringPlays: number[] = json.data.liveData.plays.scoringPlays;\n            const periodPlays: IPeriodPlay[] = json.data.liveData.plays.playsByPeriod;\n\n            //only consider plays during regular time, i.e. 1st, 2nd, and 3rd period.\n            const lastIndex: number = periodPlays[2].endIndex;\n\n            const spStartIndex = periodPlays[1].startIndex;\n            const spEndIndex = periodPlays[1].endIndex;\n\n            var plays: IPlay[] = [];\n            json.data.liveData.plays.allPlays.forEach( (play: any) => {\n                // console.log(\"play: \", play);\n                if (EVENT_IDS.includes(play.result.eventTypeId) && play.about.eventIdx <= lastIndex){\n\n                    const eventIDx = play.about.eventIdx;\n\n                    var coords;\n                    //flip the coords if it's in the 2nd period\n                    if ( spStartIndex <= eventIDx && eventIDx <= spEndIndex) {\n                        // console.log(\"event in 2nd.\");\n\n                        var x = parseInt(play.coordinates.x);\n                        var y = parseInt(play.coordinates.y);\n\n                        // console.log(\"coords pre: \" , { x, y} )\n                        coords = {\n                            x: - x,\n                            y: - y\n                        }\n                        // console.log(\"coords new: \", coords);\n                    }\n                    else {\n                        coords = play.coordinates;\n                    }\n                    const eventTypeID = play.result.eventTypeId;\n                    const teamID = play.team.id;\n                    var players: IPlayer[] = [];\n                    play.players.forEach( (player: any) => {\n                        const playerData: IPlayer = {\n                            id : player.player.id,\n                            fullName : player.player.fullName,\n                            playerType : player.playerType\n                        }\n                        players.push(playerData);\n                    });\n                    const iPlay: IPlay = {\n                        teamID : teamID,\n                        coordinates : coords,\n                        eventIDx : eventIDx,\n                        eventTypeID : eventTypeID,\n                        players: players\n                    }\n                    plays.push(iPlay);\n                }\n            });\n\n            //get homeStats\n            const homeStatsRaw = json.data.liveData.boxscore.teams.home.teamStats.teamSkaterStats;\n            const homeID = json.data.gameData.teams.home.id;\n            const homeGoals = homeStatsRaw.goals;\n            const homeBlocks = homeStatsRaw.blocked;\n            const homeShots = homeStatsRaw.shots;\n            const homeRinkSide = json.data.liveData.linescore.periods[0].home.rinkSide;\n\n            //get home goalie\n            const homeGoalieIDs: number[] = json.data.liveData.boxscore.teams.home.goalies;\n            var homeGoalies: IGoalie[] = [];\n            homeGoalieIDs.forEach( (id: number) =>{\n                const key = `ID${id}`;\n                const goalieRaw = json.data.liveData.boxscore.teams.home.players[key];\n                const goalie: IGoalie = {\n                    id: goalieRaw.person.id,\n                    saves: goalieRaw.stats.goalieStats.saves,\n                    shots: goalieRaw.stats.goalieStats.shots\n                }\n                homeGoalies.push(goalie);\n            });\n\n            const homeStats: ITeamStats = {\n                startingRinkSide: homeRinkSide,\n                id : homeID,\n                goals: homeGoals,\n                shots : homeShots,\n                blocks : homeBlocks,\n                goalies : homeGoalies\n            }\n\n\n            //get awayStats\n            const awayStatsRaw = json.data.liveData.boxscore.teams.away.teamStats.teamSkaterStats;\n            const awayID = json.data.gameData.teams.away.id;\n            const awayGoals = awayStatsRaw.goals;\n            const awayBlocks = awayStatsRaw.blocked;\n            const awayShots = awayStatsRaw.shots;\n            const awayRinkSide = json.data.liveData.linescore.periods[0].away.rinkSide;\n\n            //get away goalie\n            const awayGoalieIDs: number[] = json.data.liveData.boxscore.teams.away.goalies;\n            var awayGoalies: IGoalie[] = [];\n\n            awayGoalieIDs.forEach( (id: number) =>{\n                const key = `ID${id}`;\n                const goalieRaw = json.data.liveData.boxscore.teams.away.players[key];\n                const goalie: IGoalie = {\n                    id: goalieRaw.person.id,\n                    saves: goalieRaw.stats.goalieStats.saves,\n                    shots: goalieRaw.stats.goalieStats.shots\n                }\n                awayGoalies.push(goalie);\n            });\n\n            const awayStats: ITeamStats = {\n                startingRinkSide : awayRinkSide,\n                id : awayID,\n                goals: awayGoals,\n                shots: awayShots,\n                blocks: awayBlocks,\n                goalies : awayGoalies\n            }\n\n            var details: IAPIGameDetails = {\n                gamePK: gamePK,\n                scoringPlays: scoringPlays,\n                periodPlays: periodPlays,\n                allPlays: plays,\n                homeStats: homeStats,\n                awayStats: awayStats\n            }\n\n            // console.log(\"details before: \" , details);\n            // details = prepCoordinates(details);\n            console.log(\"details: \" , details);\n                return resolve(null);\n        })\n        .catch( () => {\n            return reject(null);\n        })\n    }) \n}\n\nconst prepCoordinates = (data: IAPIGameDetails): IAPIGameDetails => {\n    //flip the x and y coordinates of all events in the 2nd period\n    const spStart = data.periodPlays[1].startIndex;\n    const spEnd = data.periodPlays[1].endIndex;\n    for (let i = 0 ; i< data.allPlays.length ; i++ ){\n        if( spStart <= data.allPlays[i].eventIDx && data.allPlays[i].eventIDx <= spEnd ){\n            console.log(\"data before: \", data.allPlays[i]);\n            data.allPlays[i].coordinates.x = -data.allPlays[i].coordinates.x;\n            data.allPlays[i].coordinates.y = -data.allPlays[i].coordinates.y;\n            console.log(\"data after: \" , data.allPlays[i]);\n        }\n    }\n    return data;\n}\n\nexport default {getScoresAPIData, getGameAPIData}","import React, { useEffect } from 'react';\nimport './App.scss';\nimport {getScoresAPIData, getGameAPIData}from './util/APIUtils';\nimport {getScores} from './util/ScorebugUtils';\n\nconst App = () => {\n\n  const getData = async () => {\n    // await getScoresAPIData('2021-12-02')\n    await getGameAPIData(2020030174)\n    .catch( () => {})\n    .then( (res) => {\n      // parse the game data into a score bug object\n    })\n  }\n\n  useEffect( () => {\n    getData();\n    // getScores();\n  }, [])\n\n  return (\n    <div className=\"App\">\n\n    <header className=\"App-header\">\n    <h1>NHL API Visualizer</h1>\n    <p>Pick a game from the 2021-2022 season and see some cool stats.</p>\n    <a>\n      {/* <div className=\"lets-go-btn\">Let's go!</div> */}\n    </a>\n    </header>\n  </div>\n  );\n}\n// function App() {\n//   return (\n//     <div className=\"App\">\n\n//       <header className=\"App-header\">\n//       <h1>NHL API Visualizer</h1>\n//       <p>Pick a game from the 2021-2022 season and see some cool stats.</p>\n//       <a href=\"google.com\">\n//         <div className=\"lets-go-btn\">Let's go!</div>\n//       </a>\n//       <Button></Button>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["util/AnalyticsUtils.ts","util/APIUtils.ts","components/ShotVisualizer/ShotVisualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getCorsiForPercent","data","homeCF","homeStats","shots","missed","awayStats","blocks","homeCorsiPercent","home","Math","round","away","getPDO","savePercentage","homeSavePercent","awaySavePercent","goalies","length","sum","forEach","goalie","getSavePercentage","shootingPercentage","homePercentage","goals","awayPercentage","getShootingPercentage","EVENT_IDS","getScoresAPIData","date","a","Promise","resolve","reject","apiCall","axios","get","then","json","console","log","dates","games","game","gamePk","homeTeamID","teams","team","id","awayTeamID","awayTeamScore","score","gameData","homeTeamScore","homeTeamName","name","awayTeamName","push","output","catch","getGameAPIData","gamePK","scoringPlays","liveData","plays","periodPlays","playsByPeriod","lastIndex","endIndex","spStartIndex","startIndex","spEndIndex","homeID","awayID","missedShots","allPlays","play","includes","result","eventTypeId","about","eventIdx","coords","eventIDx","x","parseInt","coordinates","y","eventTypeID","teamID","players","player","playerData","fullName","playerType","iPlay","homeStatsRaw","boxscore","teamStats","teamSkaterStats","homeGoals","homeBlocks","blocked","homeShots","homeRinkSide","linescore","periods","rinkSide","homeGoalieIDs","homeGoalies","key","goalieRaw","person","saves","stats","goalieStats","startingRinkSide","awayStatsRaw","awayGoals","awayBlocks","awayShots","awayRinkSide","awayGoalieIDs","awayGoalies","details","ShotVisualizer","props","ref","useRef","VALID_SHOTS","AWAY_COLOUR","RINK_HEIGHT","useEffect","drawRink","clearOldDrawing","d3","remove","svg","current","append","attr","RINK_WIDTH","drawVerticalLine","drawCircle","drawRectangle","drawBaseRink","plotGoals","plotShotHeatMap","goal","scoringPlay","find","colour","coord","rebaseCoordinate","generateHeatArray","startCol","endCol","startRow","endRow","i","j","generateColourScale","domain","range","heatArrayAway","heatArrayHome","array","addToHeatArray","colorScaleHome","colorScaleAway","awayLayer","drawHeatMap","heatArray","colourScale","selectAll","enter","d","homeSide","height","width","style","radius","fill","className","App","getGameData","res","setGameData","CURRENT_DATE","Date","IMG_SRC","useState","selectedDate","setSelectedDate","currentGames","setCurrentGames","selectedGame","setSelectedGame","selectedGameData","setSelectedGameData","getScores","dateToString","toISOString","split","onClick","newDate","getTime","getDay","getMonth","getDate","setHours","map","index","src","Modal","open","onClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70a79746.chunk.js","sourcesContent":["import { IAPIGameDetails } from \"./types/APITypes\";\n\nexport const getShootingPercentage = (data: IAPIGameDetails): {home: number, away: number} => {\n    const homePercentage = Math.round(data.homeStats.goals / data.homeStats.shots ) * 100;\n    const awayPercentage = Math.round(data.awayStats.goals / data.awayStats.shots ) * 100;\n    return {\n        home: Math.round(homePercentage * 100) / 100,\n        away: Math.round(awayPercentage * 100) / 100\n    }\n}\n\nexport const getSavePercentage = (data: IAPIGameDetails): {home: number, away: number} => {\n    // if just one goalie played, use their save percentage for the teams' percentage.\n    var homeSavePercent: number = 0;\n    var awaySavePercent: number = 0;\n    if (data.homeStats.goalies.length == 1){\n        homeSavePercent = data.homeStats.goalies[0].savePercentage;\n    }\n    else {\n        //get the average\n        var sum = 0;\n        data.homeStats.goalies.forEach( (goalie) => {\n            sum += goalie.savePercentage;\n        })\n        homeSavePercent = sum / data.homeStats.goalies.length ;\n    }\n\n    if (data.awayStats.goalies.length == 1){\n        awaySavePercent = data.awayStats.goalies[0].savePercentage;\n    }\n    else {\n        var sum = 0;\n        data.awayStats.goalies.forEach( (goalie) => {\n            sum += goalie.savePercentage;\n        })\n        awaySavePercent = sum / data.awayStats.goalies.length ;\n    }\n\n    return {\n        home: Math.round(homeSavePercent * 100) / 100, \n        away: Math.round(awaySavePercent * 100) / 100\n    }\n\n    // if multiple goalies played, get the avg save percentage.\n}\n\nexport const getCorsiForPercent = (data: IAPIGameDetails): {home: number, away: number} => {\n    const homeCF  = data.homeStats.shots + data.homeStats.missed + data.awayStats.blocks;\n    const homeCA = data.awayStats.shots + data.awayStats.missed + data.homeStats.blocks;\n    var homeCorsiPercent = ( homeCF / (homeCF + homeCA ) ) * 100;\n    homeCorsiPercent = Math.round( homeCorsiPercent * 100) / 100\n    const awayCorsiPercent = Math.round( (100 - homeCorsiPercent) * 100) / 100\n    return {\n        home : homeCorsiPercent, \n        away : awayCorsiPercent\n    }\n\n}\n\nexport const getPDO = (data: IAPIGameDetails): {home: number , away:number } => {\n    //PDO = shooting % + save %\n    const savePercentage = getSavePercentage(data);\n    const shootingPercentage = getShootingPercentage(data);\n    return {\n        home : savePercentage.home + shootingPercentage.home,\n        away : savePercentage.away + shootingPercentage.away\n    }\n}","import { IAPIGameDetails, IAPIGameScore, IAPIScoreResults, IGoalie, IPeriodPlay, IPlay, IPlayer, ITeamStats } from \"./types/APITypes\";\nimport axios from \"axios\";\n\nconst EVENT_IDS = ['GOAL','SHOT','MISSED_SHOT','BLOCKED_SHOT']\n\nexport const getScoresAPIData = async (date: string): Promise<IAPIScoreResults> => {\n\n    return new Promise( (resolve, reject) => {\n        const apiCall = `https://statsapi.web.nhl.com/api/v1/schedule?startDate=${date}&endDate=${date}`;\n\n        axios.get(apiCall)\n        .then( (json) => {\n            console.log(\"raw: \", json);\n            if (json.data.dates && json.data.dates.length === 1){\n                var games: IAPIGameScore[] = [];\n                json.data.dates[0].games.forEach( (game : any) => {\n                    const gamePk: number = game.gamePk;\n                    const homeTeamID = game.teams.home.team.id;\n                    const awayTeamID = game.teams.away.team.id;\n                    const awayTeamScore = game.teams.away.score;\n                    const homeTeamScore = game.teams.home.score;\n                    const homeTeamName = game.teams.home.team.name;\n                    const awayTeamName = game.teams.away.team.name;\n                    const gameData: IAPIGameScore = {\n                        gamePk: gamePk,\n                        homeTeamID: homeTeamID,\n                        homeTeamScore: homeTeamScore,\n                        awayTeamID: awayTeamID,\n                        awayTeamScore: awayTeamScore,\n                        homeTeamName: homeTeamName,\n                        awayTeamName: awayTeamName\n                    }\n                    games.push(gameData);\n                });\n                const output: IAPIScoreResults = {\n                    date: date,\n                    games: games\n                }\n                console.log(\"output: \", output);\n                return resolve(output);\n            }\n            else {\n                return reject(null);\n            }\n        })\n        .catch( () => {\n            return reject(null);\n        })\n    })   \n}\n\nexport const getGameAPIData = async (gamePK: number): Promise<IAPIGameDetails> => {\n    return new Promise( (resolve, reject) => {\n        const apiCall = `https://statsapi.web.nhl.com/api/v1/game/${gamePK}/feed/live`;\n        axios.get(apiCall)\n        .then( (json) => {\n            console.log(\"raw: \", json);\n            const scoringPlays: number[] = json.data.liveData.plays.scoringPlays;\n            const periodPlays: IPeriodPlay[] = json.data.liveData.plays.playsByPeriod;\n\n            //only consider plays during regular time, i.e. 1st, 2nd, and 3rd period.\n            const lastIndex: number = periodPlays[2].endIndex;\n\n            const spStartIndex = periodPlays[1].startIndex;\n            const spEndIndex = periodPlays[1].endIndex;\n\n            const homeID = json.data.gameData.teams.home.id;\n            const awayID = json.data.gameData.teams.away.id;\n            var missedShots: any = {};\n            missedShots.home = 0;\n            missedShots.away = 0;\n\n\n            var plays: IPlay[] = [];\n            json.data.liveData.plays.allPlays.forEach( (play: any) => {\n                // console.log(\"play: \", play);\n                if (EVENT_IDS.includes(play.result.eventTypeId) && play.about.eventIdx <= lastIndex){\n\n                    const eventIDx = play.about.eventIdx;\n\n                    var coords;\n                    //flip the coords if it's in the 2nd period\n                    if ( spStartIndex <= eventIDx && eventIDx <= spEndIndex) {\n                        // console.log(\"event in 2nd.\");\n\n                        var x = parseInt(play.coordinates.x);\n                        var y = parseInt(play.coordinates.y);\n\n                        // console.log(\"coords pre: \" , { x, y} )\n                        coords = {\n                            x: - x,\n                            y: - y\n                        }\n                        // console.log(\"coords new: \", coords);\n                    }\n                    else {\n                        coords = play.coordinates;\n                    }\n                    const eventTypeID = play.result.eventTypeId;\n                    const teamID = play.team.id;\n                    var players: IPlayer[] = [];\n                    play.players.forEach( (player: any) => {\n                        const playerData: IPlayer = {\n                            id : player.player.id,\n                            fullName : player.player.fullName,\n                            playerType : player.playerType\n                        }\n                        players.push(playerData);\n                    });\n                    const iPlay: IPlay = {\n                        teamID : teamID,\n                        coordinates : coords,\n                        eventIDx : eventIDx,\n                        eventTypeID : eventTypeID,\n                        players: players\n                    }\n\n                    //add to missed shots count\n                    if (iPlay.eventTypeID === 'MISSED_SHOT'){\n                        if (iPlay.teamID === homeID ) {\n                            missedShots.home += 1;\n                        }\n                        else {\n                            missedShots.away += 1;\n                        }\n                    }\n\n                    plays.push(iPlay);\n                }\n            });\n\n            //get homeStats\n            const homeStatsRaw = json.data.liveData.boxscore.teams.home.teamStats.teamSkaterStats;\n\n            const homeGoals = homeStatsRaw.goals;\n            const homeBlocks = homeStatsRaw.blocked;\n            const homeShots = homeStatsRaw.shots;\n            const homeRinkSide = json.data.liveData.linescore.periods[0].home.rinkSide;\n\n            //get home goalie\n            const homeGoalieIDs: number[] = json.data.liveData.boxscore.teams.home.goalies;\n            var homeGoalies: IGoalie[] = [];\n            homeGoalieIDs.forEach( (id: number) =>{\n                const key = `ID${id}`;\n                const goalieRaw = json.data.liveData.boxscore.teams.home.players[key];\n                const goalie: IGoalie = {\n                    id: goalieRaw.person.id,\n                    saves: goalieRaw.stats.goalieStats.saves,\n                    shots: goalieRaw.stats.goalieStats.shots,\n                    savePercentage: goalieRaw.stats.goalieStats.savePercentage\n                }\n                homeGoalies.push(goalie);\n            });\n\n            const homeStats: ITeamStats = {\n                startingRinkSide: homeRinkSide,\n                id : homeID,\n                goals: homeGoals,\n                shots : homeShots,\n                blocks : homeBlocks,\n                goalies : homeGoalies,\n                missed : missedShots.home\n            }\n\n\n            //get awayStats\n            const awayStatsRaw = json.data.liveData.boxscore.teams.away.teamStats.teamSkaterStats;\n\n            const awayGoals = awayStatsRaw.goals;\n            const awayBlocks = awayStatsRaw.blocked;\n            const awayShots = awayStatsRaw.shots;\n            const awayRinkSide = json.data.liveData.linescore.periods[0].away.rinkSide;\n\n            //get away goalie\n            const awayGoalieIDs: number[] = json.data.liveData.boxscore.teams.away.goalies;\n            var awayGoalies: IGoalie[] = [];\n\n            awayGoalieIDs.forEach( (id: number) =>{\n                const key = `ID${id}`;\n                const goalieRaw = json.data.liveData.boxscore.teams.away.players[key];\n                const goalie: IGoalie = {\n                    id: goalieRaw.person.id,\n                    saves: goalieRaw.stats.goalieStats.saves,\n                    shots: goalieRaw.stats.goalieStats.shots,\n                    savePercentage: goalieRaw.stats.goalieStats.savePercentage\n                }\n                awayGoalies.push(goalie);\n            });\n\n            const awayStats: ITeamStats = {\n                startingRinkSide : awayRinkSide,\n                id : awayID,\n                goals: awayGoals,\n                shots: awayShots,\n                blocks: awayBlocks,\n                goalies : awayGoalies,\n                missed : missedShots.away\n            }\n\n            const details: IAPIGameDetails = {\n                gamePK: gamePK,\n                scoringPlays: scoringPlays,\n                periodPlays: periodPlays,\n                allPlays: plays,\n                homeStats: homeStats,\n                awayStats: awayStats\n            }\n\n            // console.log(\"details before: \" , details);\n            // details = prepCoordinates(details);\n            console.log(\"details: \" , details);\n            return resolve(details);\n        })\n        .catch( () => {\n            return reject(null);\n        })\n    }) \n}\n\n// const prepCoordinates = (data: IAPIGameDetails): IAPIGameDetails => {\n//     //flip the x and y coordinates of all events in the 2nd period\n//     const spStart = data.periodPlays[1].startIndex;\n//     const spEnd = data.periodPlays[1].endIndex;\n//     for (let i = 0 ; i< data.allPlays.length ; i++ ){\n//         if( spStart <= data.allPlays[i].eventIDx && data.allPlays[i].eventIDx <= spEnd ){\n//             console.log(\"data before: \", data.allPlays[i]);\n//             data.allPlays[i].coordinates.x = -data.allPlays[i].coordinates.x;\n//             data.allPlays[i].coordinates.y = -data.allPlays[i].coordinates.y;\n//             console.log(\"data after: \" , data.allPlays[i]);\n//         }\n//     }\n//     return data;\n// }\n\nexport default {getScoresAPIData, getGameAPIData}","import * as d3 from 'd3';\nimport React, { useState } from 'react';\nimport { useEffect, useRef } from 'react';\nimport { IAPIGameDetails } from '../../util/types/APITypes';\n\ninterface IShotVisualizerProps {\n    data: IAPIGameDetails\n}\n\nconst ShotVisualizer = (props: IShotVisualizerProps) => {\n    const ref = useRef<HTMLDivElement>(null);\n\tconst VALID_SHOTS = ['SHOT', 'GOAL'];\n\tconst HOME_COLOUR = 'red';\n\tconst AWAY_COLOUR = 'blue';\n\t//double the width and length of a regular hockey rink\n\tconst RINK_WIDTH = 400\n\tconst RINK_HEIGHT = 168\n\n    useEffect( () => {\n        props.data != null && drawRink();\n    }, []);\n\n    useEffect( () => {\n        clearOldDrawing();\n        props.data != null && drawRink();\n    }, [props])\n\n\tconst clearOldDrawing = () => {\n\t\td3.select(\"svg\").remove();\n\t}\n\n    const drawRink = () => {\n\n\t\t//define the initial SVG element\n        let svg = d3.select(ref.current)\n            .append('svg')\n            .attr('width', RINK_WIDTH + 10)\n            .attr('height', RINK_HEIGHT + 10);\n\n\t\t//draw the centre ice line\n\t\tdrawVerticalLine(svg, 198,0,RINK_HEIGHT,'red');\n\n\t\t//draw centre ice circle\n\t\tdrawCircle(svg,200,84,30,'red');\n\n\t\t//draw the goals\n\t\tdrawRectangle(svg,22.6,80,8,12,'blue');\n\t\tdrawRectangle(svg,371,80,8,12,'blue');\n\n\t\t//draw the goal lines\n\t\tdrawVerticalLine(svg,22,6,RINK_HEIGHT-12,'red');\n\t\tdrawVerticalLine(svg,378,6,RINK_HEIGHT-12,'red');\n\n\t\t//draw the blue lines\n\t\tdrawVerticalLine(svg,144,0,RINK_HEIGHT,'blue');\n\t\tdrawVerticalLine(svg,252,0,RINK_HEIGHT,'blue');\n\n\t\t//draw the rink outline\n\t\tdrawBaseRink(svg, RINK_HEIGHT, RINK_WIDTH);\n\n\t\t//plot all goals as points\n        plotGoals(svg);\n\n\t\t//create a heatmap for the shots\n        plotShotHeatMap(svg);\n    }\n\n    const plotGoals = (svg:d3.Selection<SVGSVGElement, unknown, null, undefined>) => {\n        props.data.scoringPlays.forEach( (goal) => {\n            const scoringPlay = props.data.allPlays.find ( play => play.eventIDx === goal);\n            if (scoringPlay != null && svg != null) {\n                const colour = scoringPlay.teamID == props.data.homeStats.id ? HOME_COLOUR : AWAY_COLOUR;\n                const coord = rebaseCoordinate(scoringPlay.coordinates);\n\t\t\t\tdrawCircle(svg,coord.x,coord.y,2,colour, colour);\n            }\n        })\n    }\n\n\tconst generateHeatArray = (startCol: number, endCol: number , startRow: number, endRow: number): number[][] => {\n\t\tvar output:number[][] = [];\n        for (let i = startCol ; i < endCol; i++) {\n            for (let j = startRow ; j < endRow; j++) {\n                output.push([i*8, j*8, 0]);\n            }\n        }\n\t\treturn output;\n\t}\n\n\tconst addToHeatArray = (array: number[][], coords: {x: number, y: number}) => {\n\t\tfor (let i = 0 ; i < array.length ; i++) {\n\t\t\tif (coords.x >= array[i][0] && coords.x < (array[i][0]+8)){\n\t\t\t\tif (coords.y >= array[i][1] && coords.y < (array[i][1]+8)){\n\t\t\t\t\tarray[i][2]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconst generateColourScale = (colour: string) => {\n\t\treturn d3.scaleLinear<string>()\n\t\t\t.domain([0,4])\n\t\t\t.range(['transparent', colour]);\n\t}\n\n    const plotShotHeatMap = (svg:d3.Selection<SVGSVGElement, unknown, null, undefined>) => {\n\t\tvar heatArrayAway = generateHeatArray(0, 25, 0, 21);\n\t\tvar heatArrayHome = generateHeatArray(25, 50, 0, 21);\n        props.data.allPlays.forEach( (play) => {\n            if (VALID_SHOTS.includes(play.eventTypeID)) {\n                const coords = rebaseCoordinate(play.coordinates);\n\t\t\t\taddToHeatArray(\n\t\t\t\t\tplay.teamID == props.data.homeStats.id ? heatArrayHome : heatArrayAway,\n\t\t\t\t\tcoords);\n            }\n        });\n\n\n        let colorScaleHome = generateColourScale(HOME_COLOUR);\n        let colorScaleAway = generateColourScale(AWAY_COLOUR);\n\n\t\t//add a second layer to draw away shot map\n\t\tvar awayLayer = svg.append('g');\n\n\t\tdrawHeatMap(svg, heatArrayHome,colorScaleHome);\n\t\tdrawHeatMap(awayLayer, heatArrayAway,colorScaleAway);\n    }\n\n\tconst drawHeatMap = (svg:any, heatArray: number[][], colourScale: any) => {\n\t\tsvg.selectAll('rect')\n            .data(heatArray)\n            .enter()\n            .append('rect')\n            .attr('rx', 6)\n            .attr('ry', 6)\n            .attr('x', (d: any) => d[0])\n            .attr('y', (d: any)=> d[1] )\n            .attr('width', 8)\n            .attr('height', 8)\n            .attr('fill', (d: any) => colourScale(d[2]))\n            .attr('opacity', .8)\n\t}\n\n    const rebaseCoordinate = (coord: {x: number , y: number}): {x: number , y: number} => {\n        //consider the starting rink side\n        const homeSide = props.data.homeStats.startingRinkSide;\n\t\tcoord.x = 2*coord.x;\n\t\tcoord.y = 2*coord.y;\n        if (homeSide == \"right\"){\n            coord.x = - coord.x;\n            coord.y = - coord.y;\n        }\n        return {\n            x: coord.x + 200,\n            y: coord.y + 84\n        }\n    }\n\n    const drawBaseRink = (svg:d3.Selection<SVGSVGElement, unknown, null, undefined>, height: number, width: number) => {\n\t\tsvg.append(\"rect\")\n\t\t\t.attr('rx', 45)\n\t\t\t.attr('ry', 45)\n\t\t\t.attr(\"x\", 0)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"width\", width)\n\t\t\t.style('opacity', 1)\n\t\t\t.style(\"stroke\", 'black')\n\t\t\t.style(\"fill\", \"none\")\n\t\t\t.style(\"stroke-width\", 'black');\n    }\n\n    const drawVerticalLine = (svg:d3.Selection<SVGSVGElement, unknown, null, undefined>,\n        x: number, y: number, length: number, colour: string) => {\n\t\tsvg.append('rect')\n\t\t\t.attr('x', x)\n\t\t\t.attr('y', y)\n\t\t\t.attr('height', length)\n\t\t\t.attr('width', '2')\n\t\t\t.style('fill', colour)\n    }\n\n    const drawRectangle = (svg:d3.Selection<SVGSVGElement, unknown, null, undefined>,\n        x: number, y: number, width: number , height: number, colour: string) => {\n        svg.append('rect')\n        .attr('x', x)\n        .attr('y', y)\n        .attr('width', width)\n        .attr('height', height)\n        .attr('stroke', colour)\n        .style(\"stroke-width\", 0.5)\n        .attr('fill', '#89CFF0');\n    }\n\n    const drawCircle =  (svg:d3.Selection<SVGSVGElement, unknown, null, undefined>,\n        x: number, y: number, radius: number, colour: string, fill?: string) => {\n            svg.append('circle')\n            .attr('cx', x)\n            .attr('cy', y)\n            .style(\"stroke-width\", 0.5)\n            .attr('r', radius)\n            .attr('stroke', colour)\n            .attr('fill', fill ? fill : 'transparent');\n        }\n\n    return (\n        <div className=\"shot-visualizer-div\" ref={ref}/>\n    )\n}\n\nexport default ShotVisualizer","import { Button, Modal } from '@material-ui/core';\nimport React, { useEffect, useRef, useState } from 'react';\nimport './App.scss';\nimport { getCorsiForPercent, getPDO } from './util/AnalyticsUtils';\nimport { getGameAPIData, getScoresAPIData }from './util/APIUtils';\nimport { IAPIGameDetails, IAPIGameScore, IAPIScoreResults } from './util/types/APITypes';\nimport ShotVisualizer from './components/ShotVisualizer/ShotVisualizer';\n\nconst App = () => {\n\n  const getGameData = async (gamePK: number) => {\n    await getGameAPIData(gamePK)\n    .then( (res) => {\n      setGameData(res);\n    })\n  }\n  const CURRENT_DATE = new Date();\n  const WEEKDAYS = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\n  const MONTHS = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const IMG_SRC = \"https://www-league.nhlstatic.com/images/logos/teams-current-primary-light/\";\n\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [currentGames, setCurrentGames] = useState<IAPIScoreResults|null>(null);\n  const [selectedGame, setSelectedGame] = useState<number>(0);\n  const [selectedGameData, setSelectedGameData] = useState<IAPIGameScore|null>(null);\n  const [gameData, setGameData] = useState<IAPIGameDetails|null>(null);\n\n  const getScores = async () => {\n    const dateToString = selectedDate.toISOString().split('T')[0];\n    await getScoresAPIData(dateToString)\n    .then( (res) => {\n      setCurrentGames(res);\n    })\n  }\n\n  useEffect( () => {\n    if (selectedGame !== 0){\n      getGameData(selectedGame);\n    }\n  }, [selectedGame])\n\n  useEffect( () => {\n    getScores();\n  }, [])\n\n  useEffect( () => {\n    getScores();\n  }, [selectedDate])\n\n  const handlePrevButtonClicked = () => {\n    const newDate = new Date(selectedDate.getTime() - 24*60*60*1000);\n    setSelectedDate(newDate);\n  }\n  const handleNextButtonClicked = () => {\n    const newDate = new Date(selectedDate.getTime() + 24*60*60*1000);\n    setSelectedDate(newDate);\n  }\n\n  return (\n    <div className=\"App\">\n    <h1>NHL Scoring Visualizer</h1>\n    <p>Pick a game and see some interesting scoring stats.</p>\n\n    <div className=\"day-selector\">\n      <button className=\"day-selector-btn\" onClick={handlePrevButtonClicked}>Previous Day</button>\n      <p>{`${WEEKDAYS[selectedDate.getDay()]}, ${MONTHS[selectedDate.getMonth()]} ${selectedDate.getDate()}`}</p>\n  \n      <button className={\"day-selector-btn\" + (selectedDate.setHours(0,0,0,0) == CURRENT_DATE.setHours(0,0,0,0) ? \" hide\" : \"\")}   onClick={handleNextButtonClicked}>Next Day</button>\n\n    </div>\n\n    {currentGames && currentGames.games.map( (game, index) => \n    <div key={index} className=\"card level-3\" onClick={() => {\n      setSelectedGameData(game);\n      setSelectedGame(game.gamePk);\n      }}>\n      <img src={`${IMG_SRC}${game.awayTeamID}.svg`} className=\"scorebug-logo\"></img>\n      <h5>{game.awayTeamName} vs {game.homeTeamName}</h5>\n      <img src={`${IMG_SRC}${game.homeTeamID}.svg`} className=\"scorebug-logo\"></img>\n      <p>{game.awayTeamScore} - {game.homeTeamScore} </p>\n    </div>\n    )}\n\n    {selectedGame !== 0 && gameData && selectedGameData && (\n      <Modal open={selectedGame !== 0}\n      onClose={ () => {setSelectedGame(0)}}>\n        <div className=\"modal card\">\n          <p>{selectedGameData.awayTeamName} vs. {selectedGameData.homeTeamName}</p>\n          <p>{selectedGameData.awayTeamScore} - {selectedGameData.homeTeamScore}</p>\n          <p>Home Corsi: {getCorsiForPercent(gameData).home}%</p>\n          <p>Away Corsi: {getCorsiForPercent(gameData).away}%</p>\n          <p>Home PDO: {getPDO(gameData).home}</p>\n          <p>Away PDO: {getPDO(gameData).away}</p>\n          <ShotVisualizer data={gameData}/>\n        </div>\n      </Modal>\n    )}\n\n    <div className=\"footer\">\n      <p>Made by Eric Tran using public data available through the NHL API.</p>\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
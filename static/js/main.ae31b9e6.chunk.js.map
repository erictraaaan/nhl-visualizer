{"version":3,"sources":["util/AnalyticsUtils.ts","util/APIUtils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getCorsiForPercent","data","homeCF","homeStats","shots","missed","awayStats","blocks","homeCorsiPercent","home","away","getPDO","savePercentage","homeSavePercent","awaySavePercent","goalies","length","sum","forEach","goalie","getSavePercentage","shootingPercentage","Math","round","goals","getShootingPercentage","EVENT_IDS","getScoresAPIData","date","a","Promise","resolve","reject","apiCall","axios","get","then","json","console","log","dates","games","game","gamePk","homeTeamID","teams","team","id","awayTeamID","awayTeamScore","score","gameData","homeTeamScore","homeTeamName","name","awayTeamName","push","output","catch","getGameAPIData","gamePK","scoringPlays","liveData","plays","periodPlays","playsByPeriod","lastIndex","endIndex","spStartIndex","startIndex","spEndIndex","homeID","awayID","missedShots","allPlays","play","includes","result","eventTypeId","about","eventIdx","coords","eventIDx","x","parseInt","coordinates","y","eventTypeID","teamID","players","player","playerData","fullName","playerType","iPlay","homeStatsRaw","boxscore","teamStats","teamSkaterStats","homeGoals","homeBlocks","blocked","homeShots","homeRinkSide","linescore","periods","rinkSide","homeGoalieIDs","homeGoalies","key","goalieRaw","person","saves","stats","goalieStats","startingRinkSide","awayStatsRaw","awayGoals","awayBlocks","awayShots","awayRinkSide","awayGoalieIDs","awayGoalies","details","App","getGameData","res","setGameData","useState","currentGames","setCurrentGames","selectedGame","setSelectedGame","getScores","useEffect","className","map","index","onClick","Modal","open","onClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae31b9e6.chunk.js","sourcesContent":["import { IAPIGameDetails } from \"./types/APITypes\";\n\nexport const getShootingPercentage = (data: IAPIGameDetails): {home: number, away: number} => {\n    const homePercentage = Math.round(data.homeStats.goals / data.homeStats.shots ) * 100;\n    const awayPercentage = Math.round(data.awayStats.goals / data.awayStats.shots ) * 100;\n    return {\n        home: homePercentage,\n        away: awayPercentage\n    }\n}\n\nexport const getSavePercentage = (data: IAPIGameDetails): {home: number, away: number} => {\n    // if just one goalie played, use their save percentage for the teams' percentage.\n    var homeSavePercent: number = 0;\n    var awaySavePercent: number = 0;\n    if (data.homeStats.goalies.length == 1){\n        homeSavePercent = data.homeStats.goalies[0].savePercentage;\n    }\n    else {\n        //get the average\n        var sum = 0;\n        data.homeStats.goalies.forEach( (goalie) => {\n            sum += goalie.savePercentage;\n        })\n        homeSavePercent = sum / data.homeStats.goalies.length ;\n    }\n\n    if (data.awayStats.goalies.length == 1){\n        awaySavePercent = data.awayStats.goalies[0].savePercentage;\n    }\n    else {\n        var sum = 0;\n        data.awayStats.goalies.forEach( (goalie) => {\n            sum += goalie.savePercentage;\n        })\n        awaySavePercent = sum / data.awayStats.goalies.length ;\n    }\n\n    return {\n        home: homeSavePercent, \n        away: awaySavePercent\n    }\n\n    // if multiple goalies played, get the avg save percentage.\n}\n\nexport const getCorsiForPercent = (data: IAPIGameDetails): {home: number, away: number} => {\n    const homeCF  = data.homeStats.shots + data.homeStats.missed + data.awayStats.blocks;\n    const homeCA = data.awayStats.shots + data.awayStats.missed + data.homeStats.blocks;\n    const homeCorsiPercent = ( homeCF / (homeCF + homeCA ) ) * 100;\n\n    return {\n        home : homeCorsiPercent , \n        away : (100 - homeCorsiPercent)\n    }\n\n}\n\nexport const getPDO = (data: IAPIGameDetails): {home: number , away:number } => {\n    //PDO = shooting % + save %\n    const savePercentage = getSavePercentage(data);\n    const shootingPercentage = getShootingPercentage(data);\n    return {\n        home : savePercentage.home + shootingPercentage.home,\n        away : savePercentage.away + shootingPercentage.away\n    }\n}","import { IAPIGameDetails, IAPIGameScore, IAPIScoreResults, IGoalie, IPeriodPlay, IPlay, IPlayer, ITeamStats } from \"./types/APITypes\";\nimport axios from \"axios\";\n\nconst EVENT_IDS = ['GOAL','SHOT','MISSED_SHOT','BLOCKED_SHOT']\n\nexport const getScoresAPIData = async (date: string): Promise<IAPIScoreResults> => {\n\n    return new Promise( (resolve, reject) => {\n        const apiCall = `https://statsapi.web.nhl.com/api/v1/schedule?startDate=${date}&endDate=${date}`;\n\n        axios.get(apiCall)\n        .then( (json) => {\n            console.log(\"raw: \", json);\n            if (json.data.dates && json.data.dates.length === 1){\n                console.log(\"in here\")\n                var games: IAPIGameScore[] = [];\n                json.data.dates[0].games.forEach( (game : any) => {\n                    const gamePk: number = game.gamePk;\n                    const homeTeamID = game.teams.home.team.id;\n                    const awayTeamID = game.teams.away.team.id;\n                    const awayTeamScore = game.teams.away.score;\n                    const homeTeamScore = game.teams.home.score;\n                    const homeTeamName = game.teams.home.team.name;\n                    const awayTeamName = game.teams.away.team.name;\n                    const gameData: IAPIGameScore = {\n                        gamePk: gamePk,\n                        homeTeamID: homeTeamID,\n                        homeTeamScore: homeTeamScore,\n                        awayTeamID: awayTeamID,\n                        awayTeamScore: awayTeamScore,\n                        homeTeamName: homeTeamName,\n                        awayTeamName: awayTeamName\n                    }\n                    games.push(gameData);\n                });\n                const output: IAPIScoreResults = {\n                    date: date,\n                    games: games\n                }\n                console.log(\"output: \", output);\n                return resolve(output);\n            }\n            else {\n                return reject(null);\n            }\n        })\n        .catch( () => {\n            return reject(null);\n        })\n    })   \n}\n\nexport const getGameAPIData = async (gamePK: number): Promise<IAPIGameDetails> => {\n    return new Promise( (resolve, reject) => {\n        const apiCall = `https://statsapi.web.nhl.com/api/v1/game/${gamePK}/feed/live`;\n        axios.get(apiCall)\n        .then( (json) => {\n            console.log(\"raw: \", json);\n            const scoringPlays: number[] = json.data.liveData.plays.scoringPlays;\n            const periodPlays: IPeriodPlay[] = json.data.liveData.plays.playsByPeriod;\n\n            //only consider plays during regular time, i.e. 1st, 2nd, and 3rd period.\n            const lastIndex: number = periodPlays[2].endIndex;\n\n            const spStartIndex = periodPlays[1].startIndex;\n            const spEndIndex = periodPlays[1].endIndex;\n\n            const homeID = json.data.gameData.teams.home.id;\n            const awayID = json.data.gameData.teams.away.id;\n            var missedShots: any = {};\n            missedShots.home = 0;\n            missedShots.away = 0;\n\n\n            var plays: IPlay[] = [];\n            json.data.liveData.plays.allPlays.forEach( (play: any) => {\n                // console.log(\"play: \", play);\n                if (EVENT_IDS.includes(play.result.eventTypeId) && play.about.eventIdx <= lastIndex){\n\n                    const eventIDx = play.about.eventIdx;\n\n                    var coords;\n                    //flip the coords if it's in the 2nd period\n                    if ( spStartIndex <= eventIDx && eventIDx <= spEndIndex) {\n                        // console.log(\"event in 2nd.\");\n\n                        var x = parseInt(play.coordinates.x);\n                        var y = parseInt(play.coordinates.y);\n\n                        // console.log(\"coords pre: \" , { x, y} )\n                        coords = {\n                            x: - x,\n                            y: - y\n                        }\n                        // console.log(\"coords new: \", coords);\n                    }\n                    else {\n                        coords = play.coordinates;\n                    }\n                    const eventTypeID = play.result.eventTypeId;\n                    const teamID = play.team.id;\n                    var players: IPlayer[] = [];\n                    play.players.forEach( (player: any) => {\n                        const playerData: IPlayer = {\n                            id : player.player.id,\n                            fullName : player.player.fullName,\n                            playerType : player.playerType\n                        }\n                        players.push(playerData);\n                    });\n                    const iPlay: IPlay = {\n                        teamID : teamID,\n                        coordinates : coords,\n                        eventIDx : eventIDx,\n                        eventTypeID : eventTypeID,\n                        players: players\n                    }\n\n                    //add to missed shots count\n                    if (iPlay.eventTypeID === 'MISSED_SHOT'){\n                        if (iPlay.teamID === homeID ) {\n                            missedShots.home += 1;\n                        }\n                        else {\n                            missedShots.away += 1;\n                        }\n                    }\n\n                    plays.push(iPlay);\n                }\n            });\n\n            //get homeStats\n            const homeStatsRaw = json.data.liveData.boxscore.teams.home.teamStats.teamSkaterStats;\n\n            const homeGoals = homeStatsRaw.goals;\n            const homeBlocks = homeStatsRaw.blocked;\n            const homeShots = homeStatsRaw.shots;\n            const homeRinkSide = json.data.liveData.linescore.periods[0].home.rinkSide;\n\n            //get home goalie\n            const homeGoalieIDs: number[] = json.data.liveData.boxscore.teams.home.goalies;\n            var homeGoalies: IGoalie[] = [];\n            homeGoalieIDs.forEach( (id: number) =>{\n                const key = `ID${id}`;\n                const goalieRaw = json.data.liveData.boxscore.teams.home.players[key];\n                const goalie: IGoalie = {\n                    id: goalieRaw.person.id,\n                    saves: goalieRaw.stats.goalieStats.saves,\n                    shots: goalieRaw.stats.goalieStats.shots,\n                    savePercentage: goalieRaw.stats.goalieStats.savePercentage\n                }\n                homeGoalies.push(goalie);\n            });\n\n            const homeStats: ITeamStats = {\n                startingRinkSide: homeRinkSide,\n                id : homeID,\n                goals: homeGoals,\n                shots : homeShots,\n                blocks : homeBlocks,\n                goalies : homeGoalies,\n                missed : missedShots.home\n            }\n\n\n            //get awayStats\n            const awayStatsRaw = json.data.liveData.boxscore.teams.away.teamStats.teamSkaterStats;\n\n            const awayGoals = awayStatsRaw.goals;\n            const awayBlocks = awayStatsRaw.blocked;\n            const awayShots = awayStatsRaw.shots;\n            const awayRinkSide = json.data.liveData.linescore.periods[0].away.rinkSide;\n\n            //get away goalie\n            const awayGoalieIDs: number[] = json.data.liveData.boxscore.teams.away.goalies;\n            var awayGoalies: IGoalie[] = [];\n\n            awayGoalieIDs.forEach( (id: number) =>{\n                const key = `ID${id}`;\n                const goalieRaw = json.data.liveData.boxscore.teams.away.players[key];\n                const goalie: IGoalie = {\n                    id: goalieRaw.person.id,\n                    saves: goalieRaw.stats.goalieStats.saves,\n                    shots: goalieRaw.stats.goalieStats.shots,\n                    savePercentage: goalieRaw.stats.goalieStats.savePercentage\n                }\n                awayGoalies.push(goalie);\n            });\n\n            const awayStats: ITeamStats = {\n                startingRinkSide : awayRinkSide,\n                id : awayID,\n                goals: awayGoals,\n                shots: awayShots,\n                blocks: awayBlocks,\n                goalies : awayGoalies,\n                missed : missedShots.away\n            }\n\n            const details: IAPIGameDetails = {\n                gamePK: gamePK,\n                scoringPlays: scoringPlays,\n                periodPlays: periodPlays,\n                allPlays: plays,\n                homeStats: homeStats,\n                awayStats: awayStats\n            }\n\n            // console.log(\"details before: \" , details);\n            // details = prepCoordinates(details);\n            console.log(\"details: \" , details);\n            return resolve(details);\n        })\n        .catch( () => {\n            return reject(null);\n        })\n    }) \n}\n\n// const prepCoordinates = (data: IAPIGameDetails): IAPIGameDetails => {\n//     //flip the x and y coordinates of all events in the 2nd period\n//     const spStart = data.periodPlays[1].startIndex;\n//     const spEnd = data.periodPlays[1].endIndex;\n//     for (let i = 0 ; i< data.allPlays.length ; i++ ){\n//         if( spStart <= data.allPlays[i].eventIDx && data.allPlays[i].eventIDx <= spEnd ){\n//             console.log(\"data before: \", data.allPlays[i]);\n//             data.allPlays[i].coordinates.x = -data.allPlays[i].coordinates.x;\n//             data.allPlays[i].coordinates.y = -data.allPlays[i].coordinates.y;\n//             console.log(\"data after: \" , data.allPlays[i]);\n//         }\n//     }\n//     return data;\n// }\n\nexport default {getScoresAPIData, getGameAPIData}","import { Modal } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { getCorsiForPercent, getPDO } from './util/AnalyticsUtils';\nimport { getGameAPIData, getScoresAPIData }from './util/APIUtils';\nimport { IAPIGameDetails, IAPIScoreResults } from './util/types/APITypes';\n// import {getScores} from './util/ScorebugUtils';\n\nconst App = () => {\n\n  const getGameData = async (gamePK: number) => {\n    await getGameAPIData(gamePK)\n    .then( (res) => {\n      setGameData(res);\n    })\n  }\n\n  const [currentGames, setCurrentGames] = useState<IAPIScoreResults|null>(null);\n  const [selectedGame, setSelectedGame] = useState<number>(0);\n  const [gameData, setGameData] = useState<IAPIGameDetails|null>(null);\n\n  const getScores = async () => {\n    await getScoresAPIData('2021-12-04')\n    .then( (res) => {\n      setCurrentGames(res);\n    })\n  }\n\n  useEffect( () => {\n    if (selectedGame !== 0){\n      getGameData(selectedGame);\n    }\n\n  }, [selectedGame])\n\n  useEffect( () => {\n    // getData();\n    getScores();\n  }, [])\n\n  return (\n    <div className=\"App\">\n\n    {/* <header className=\"App-header\"> */}\n    <h1>NHL Scoring Visualizer</h1>\n    <p>Pick a game and see some interesting scoring stats.</p>\n    <p>Made using the public NHL API.</p>\n\n    {currentGames && currentGames.games.map( (game, index) => \n    <div key={index} className=\"card level-3\" onClick={() => {setSelectedGame(game.gamePk)}}>\n      <h5>{game.awayTeamName} vs {game.homeTeamName}</h5>\n      <p>{game.awayTeamScore} - {game.homeTeamScore} </p>\n    </div>\n    )}\n\n    {selectedGame !== 0 && gameData && (\n      <Modal open={selectedGame !== 0}\n      onClose={ () => {setSelectedGame(0)}}>\n        <div className=\"card level-3\" >\n          <p>{gameData.gamePK}</p>\n          <p>Home Corsi: {getCorsiForPercent(gameData).home}%</p>\n          <p>Away Corsi: {getCorsiForPercent(gameData).away}%</p>\n          <p>Home PDO: {getPDO(gameData).home}</p>\n          <p>Away PDO: {getPDO(gameData).away}</p>\n        </div>\n      </Modal>\n    )}\n\n    {/* <div className=\"card level-3\">\n      <h5>Floating Card</h5>\n    </div> */}\n    {/* <a> */}\n      {/* <div className=\"lets-go-btn\">Let's go!</div> */}\n    {/* </a> */}\n    {/* </header> */}\n  </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}